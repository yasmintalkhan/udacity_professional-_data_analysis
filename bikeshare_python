import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' } 
months = ['january', 'february', 'march', 'april', 'may', 'june']
days = ['saturday', 'sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday']

def get_filters():
    
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
        
     """
    
    print('Hello! Let\'s explore some US bikeshare data!')
    
    
    # get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    city =" "
    while city not in CITY_DATA:
        city = input("choose one of this cities, chicago , new york city or washington \n").lower()
        
    # get user input for month (all, january, february, ... , june)
    month =" "
    while month not in months and month!="all":
        month = input('choose one of this months , january , february , march , april , may , june or "all" for all months:\n').lower()
        
    # get user input for day of week (all, monday, tuesday, ... sunday)
    day =" "   
    while day not in days and day!="all":
        day = input('choose one of this days , saturday , sunday , monday , tuesday , wednesday , thursday , friday or "all" for all days:\n').lower()
     
          

    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    
    # load data file into a data frame
    df = pd.read_csv(CITY_DATA[city])

    # convert the start time column to datetime
    df['Start Time'] = pd.to_datetime(df['Start Time'])

    # extract month and day of week from Start Time to create new columns
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.day_name()


    # filter by month if applicable
    if month != 'all':
        # use the index of the months list to get the corresponding int
        month = months.index(month) + 1

        # filter by month to creat the new data frame
        df = df[df['month'] == month]

        # filter by day of week if applicable
    if day != 'all':
        # filter by day of week to create the new dataframe
        df = df[df['day_of_week'] == day.title()]


    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    common_month = df['month'].mode()[0]
    print('the most common month:', common_month)


    # TO DO: display the most common day of week
    common_day_of_week = df["day_of_week"].mode()[0]
    print('the most common day:', common_day_of_week)
    
   # TO DO: display the most common start hour
    df['hour'] = df['Start Time'].dt.hour
    most_common_start_hour = df['hour'].mode()[0]
    print('the most common start hour:', most_common_start_hour)
    
    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
   

def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    common_start_st = df['Start Station'].mode()[0]
    print('most commonly used start station:', common_start_st)
    

    # TO DO: display most commonly used end station
    common_end_st = df['End Station'].mode()[0]
    print('most commonly used end station:', common_end_st)


    # TO DO: display most frequent combination of start station and end station trip
    common_start_end_st = (df['Start Station'] + '_' + df['End Station']).mode()[0]
    print('most frequent combination of start station and end station trip:', common_start_end_st)


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    total_travel_time = df['Trip Duration'].sum()
    print('total travel time:', total_travel_time)


    # TO DO: display mean travel time
    average_travel_time = df['Trip Duration'].mean()
    print('mean travel time:', average_travel_time)


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    print('counts of user types:\n', df['User Type'].value_counts())


    # TO DO: Display counts of gender
    # chicago and new york city have gender only
    if 'gender' in df:
        print('counts of gender:\n', df['Gender'].value_counts())



    # TO DO: Display earliest, most recent, and most common year of birth
    # chicago and new york city only, have birth year
    if'Birth Year' in df:
        earliest_birth_year = df['Birth Year'].min()
        print('earliest year of birth:\n', earliest_birth_year)
        recent_birth_year = df['Birth Year'].max()
        print('most recent year of birth:\n', recent_birth_year)
        common_birth_year = df['Birth Year'].mode()[0]
        print('most common year of birth:\n', common_birth_year)


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
    

def display_raw_data(df):
   
    view_data = input("would you like to display raw data? (yes / no)").lower()
    start_loc = 0
    pd.set_option("display.max_columns", None) # Displays the default number of value. Interpreter reads this value and displays the rows with this value as upper limit to display.

    while view_data == 'yes':
        print(df.iloc[start_loc:start_loc+5])
        start_loc += 5
        view_data = input('do you need to continue? (yes / no)').lower()
        if view_data == "no":
            break

def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)
        display_raw_data(df)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()
